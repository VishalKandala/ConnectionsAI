# src/Model.py

###############################################################################
#                                                                             #
#                                Model Module                                 #
#                                                                             #
#      Contains the model function that integrates with the Flask app.        #
#                                                                             #
###############################################################################

# Import necessary modules
from model_loader import ModelLoader  # Function to load the FastText model
from connections_model import connections_model  # Function to group words


# def model(words, strikes, isOneAway, correctGroups, previousGuesses, error):
#     """
#     Testing model function that returns predefined guesses.
#     """
#     # Predefined guesses for testing
#     test_guesses = [
#         ["APPLE", "BANANA", "CHERRY", "DATE"],
#         ["ELEPHANT", "FROG", "GIRAFFE", "HIPPO"],
#         ["INDIA", "JAPAN", "KENYA", "LAOS"],
#         ["MONKEY", "NEWT", "OCTOPUS", "PARROT"]
#     ]

#     # Filter out guesses that have already been made
#     for guess in test_guesses:
#         sorted_guess = sorted([word.upper() for word in guess])
#         if not any(sorted_guess == sorted([word.upper() for word in pg]) for pg in previousGuesses):
#             return guess, False  # Return the next predefined guess

#     # If all guesses have been made, end the turn
#     return [], True


# Load the pre-trained FastText model once when the module is imported

model_instance = ModelLoader.load_vectors() # Defaults  to 'embeddings/fasttext_vectors.kv'

def model(words, strikes, isOneAway, correctGroups, previousGuesses, error):
    """
    _______________________________________________________
    Parameters:
    words - 1D Array with 16 shuffled words
    strikes - Integer with number of strikes
    isOneAway - Boolean if your previous guess is one word away from the correct answer
    correctGroups - 2D Array with groups previously guessed correctly
    previousGuesses - 2D Array with previous guesses
    error - String with error message (0 if no error)

    Returns:
    guess - 1D Array with 4 words
    endTurn - Boolean if you want to end the puzzle
    _______________________________________________________
    """
    print("Model function called with:")
    print(f"  words: {words}")
    print(f"  strikes: {strikes}")
    print(f"  isOneAway: {isOneAway}")
    print(f"  correctGroups: {correctGroups}")
    print(f"  previousGuesses: {previousGuesses}")
    print(f"  error: {error}")

    # Get the groups using connections_model
    groups = connections_model(words, model_instance)
    print("Groups generated by connections_model:")
    for group_name, group_words in groups.items():
        print(f"  {group_name}: {group_words}")

    # Flatten correctGroups and previousGuesses to get words already used
    used_words = set()
    for group in correctGroups + previousGuesses:
        used_words.update(group)
    print(f"Used words: {used_words}")

    # Find a group to guess, preferring groups with more unused words
    guess = None
    max_unused_words = 0
    for group_name, group_words in groups.items():
        unused_words = [word for word in group_words if word not in used_words]
        print(f"Checking group {group_name}: {group_words}")
        print(f"  Unused words in this group: {unused_words}")
        if len(unused_words) > max_unused_words:
            guess = unused_words
            max_unused_words = len(unused_words)
            if len(unused_words) == 4:
                print(f"  Selected group {group_name} for guessing.")
                break  # Found a group with all unused words

    if guess:
        endTurn = False  # Decide whether to end turn or not
    else:
        # No new groups found, decide whether to end turn
        guess = []  # No guess
        endTurn = True  # No more guesses available

    print("Model output:")
    print(f"  participantGuess: {guess}")
    print(f"  endTurn: {endTurn}")

    return guess, endTurn